name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 히스토리 가져오기

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build check
        run: npm run build

      - name: Check for breaking changes
        run: |
          # 빌드 성공 확인
          echo "✅ Build successful"

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🚀 PR Quality Check Results')
            );

            const commentBody = `## 🚀 PR Quality Check Results

            ✅ **Build Status**: Success
            ✅ **Tests**: Passed  
            ✅ **Linting**: Passed
            ✅ **Type Check**: Passed

            ### 📊 Summary
            - 모든 체크가 통과했습니다!
            - PR을 안전하게 머지할 수 있습니다.

            ---
            *이 메시지는 자동으로 생성되었습니다.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }



