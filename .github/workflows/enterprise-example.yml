name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 프론트엔드 빌드 및 테스트
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  # 백엔드 빌드 및 테스트
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}

      - name: Run backend tests
        run: |
          cd backend
          ./mvnw test
          ./mvnw jacoco:report

      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t ${{ env.IMAGE_NAME }}-backend:${{ github.sha }} .

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  # 통합 테스트 (E2E)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-jar

      - name: Start services
        run: |
          # 백엔드 서버 시작
          java -jar backend-jar/*.jar &

          # 프론트엔드 서버 시작 (Nginx 또는 Node.js)
          npx serve -s frontend-build -l 3000 &

          # 서비스 시작 대기
          sleep 30

      - name: Run E2E tests
        run: |
          npm install -g playwright
          npx playwright install
          npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Docker 이미지 빌드 및 푸시
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        run: |
          docker build -f frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

      - name: Build and push backend image
        run: |
          docker build -f backend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}

  # 배포 (Kubernetes)
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [integration-tests, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig

          # 이미지 태그 업데이트
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml

          # 배포 실행
          kubectl apply -f k8s/

          # 배포 상태 확인
          kubectl rollout status deployment/frontend-deployment
          kubectl rollout status deployment/backend-deployment

  # 알림 (Slack)
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#dev-notifications'
          text: |
            🚀 Deployment Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

